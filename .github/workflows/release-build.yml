name: Build & Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Tag / version (e.g. v1.2.3)'
        required: true
        type: string

permissions:
  contents: write   # needed to create releases
  packages: read

jobs:
  # ---------- BUILD ----------
  build:
    runs-on: ${{ matrix.os }}
    env:
      DOTNET_RESTORE_LOCKED_MODE: false
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            rid: win-x64
            fw: net9.0-desktop
            art: win-x64
            binary_name: Alua.exe
          - os: macos-latest
            rid: osx-arm64
            fw: net9.0-desktop
            art: osx-arm64
            binary_name: Alua.app

    steps:
      # 1 ─ Checkout repositories
      - name: Checkout AluaAchievements
        uses: actions/checkout@v4
        with:
          repository: Rarisma/AluaAchievements
          path: AluaAchievements

      - name: Checkout SACHYA
        uses: actions/checkout@v4
        with:
          repository: rarisma/sachya
          path: SACHYA

      - name: Checkout Alua
        uses: actions/checkout@v4
        with:
          path: Alua

      # 2 ─ Install the .NET SDK
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      # 3 ─ Restore dependencies
      - name: Restore dependencies
        run: dotnet restore Alua/Alua.sln

      # 4 ─ Clean publish directory (macOS specific)
      - name: Clean publish directory (macOS)
        if: matrix.os == 'macos-latest'
        run: rm -rf publish

      # 5 ─ Build and publish
      - name: Publish (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          dotnet publish Alua/Alua/Alua.csproj `
            -c Release `
            -f ${{ matrix.fw }} `
            -r ${{ matrix.rid }} `
            -p:UseMonoRuntime=false `
            --self-contained `
            -o publish

      - name: Publish (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          dotnet publish Alua/Alua/Alua.csproj \
            -c Release \
            -f ${{ matrix.fw }} \
            -r ${{ matrix.rid }} \
            -p:UseMonoRuntime=false \
            -p:PackageFormat=app \
            -p:CodesignKey=- \
            --self-contained \
            -o publish

      # 6 ─ Package artifacts
      - name: Package Windows artifact
        if: matrix.os == 'windows-latest'
        run: |
          Compress-Archive -Path "publish/*" -DestinationPath "alua-${{ matrix.art }}.zip"

      - name: Package macOS artifact
        if: matrix.os == 'macos-latest'
        run: |
          cd publish
          zip -r ../alua-${{ matrix.art }}.zip Alua.app

      # 7 ─ Upload artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: alua-${{ matrix.art }}
          path: alua-${{ matrix.art }}.zip

  # ---------- RELEASE ----------
  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      # 1 ─ Download all artifacts
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      # 2 ─ Create GitHub Release
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ inputs.version }}
          name: Release ${{ inputs.version }}
          draft: false
          prerelease: false
          files: |
            artifacts/alua-win-x64/alua-win-x64.zip
            artifacts/alua-osx-arm64/alua-osx-arm64.zip
